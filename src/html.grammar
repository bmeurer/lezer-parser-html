@top[name=Document,lang=html] { (entity | DoctypeDecl)+ }

@external grammar elementContent from "./content.js"

entity { Text | EntityReference | CharacterReference | Element | Comment | ProcessingInst }

Element {
  OpenTag nest.elementContent<"</" space* identifier space* ">", entity*> (CloseTag | missingCloseTag) |
  SelfClosingTag
}

OpenTag {
  StartTag space* TagName space* Attribute* EndTag
}

SelfClosingTag {
  StartTag space* TagName space* Attribute* (SelfCloseEndTag | SelfCloserEndTag)
}

CloseTag {
  (StartCloseTag space* TagName |
   MismatchedStartCloseTag space* MismatchedTagName)
  space* EndTag
}

Attribute {
  AttributeName space* (Is space* (AttributeValue | UnquotedAttributeValue) space*)?
}

AttributeValue[style=literal.string] { "\"" (attributeContent | EntityReference | CharacterReference)* "\"" }

@export RawText[style=markup.content] {}

@external tokens tagStart from "./tokens.js" {
  StartTag[style=bracket.angle.open],
  StartCloseTag[style=bracket.angle.open],
  MismatchedStartCloseTag[name=StartCloseTag,style=bracket.angle.open],
  missingCloseTag
}

@external tokens selfClosed from "./tokens.js" {
  SelfCloserEndTag[style=bracket.angle.close]
}

@tokens {
  EndTag[style=bracket.angle.close] { ">" }

  SelfCloseEndTag[style=bracket.angle.close] { "/>" }

  nameStart {
    ":" | std.asciiLetter | "_" |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  nameChar {
    nameStart | "-" | "." | std.digit | $[\u00B7\u0300-\u036F\u203F-\u2040]
  }

  identifier { nameStart nameChar* }

  TagName[style=name.type] { identifier }
  
  MismatchedTagName[style=invalid.unexpected] { identifier }

  AttributeName[style=name.property] { identifier }

  UnquotedAttributeValue[style=name.value] { ![ \t\n\r\u00a0=<>"'/]+ }

  attributeContent { !["&]+ }

  Is[style=operator.define] { "=" }

  EntityReference[style=literal.character] { "&" ![#; ]+ ";" }

  CharacterReference[style=literal.character] { "&#" ![; ]+ ";" }

  Text[style=markup.content] { ![<&]+ }

  Comment[style=comment.block] { "<!--" commentContent }

  commentContent { ![\-] commentContent | "-" commentDash1 }
  commentDash1 { ![\-] commentContent | "-" commentDash2 }
  commentDash2 { ![\->] commentContent | "-" commentDash2 | ">" }

  ProcessingInst[style=meta.instruction] { "<?" piContent }

  piContent { ![?] piContent | "?" piQuestion }
  piQuestion { ![>] piContent | ">" }

  DoctypeDecl[style=meta.declaration] { "<!" ("doctype" | "DOCTYPE") ![>]* ">" }

  @precedence { Comment, ProcessingInst, DoctypeDecl }

  space { (" " | "\t" | "\r" | "\n")+ }
}
