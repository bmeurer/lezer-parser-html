@top Document { (entity | DoctypeDecl)+ }

@external grammar elementContent from "./content.js"

@dialects { noMatch }

entity {
  Text |
  EntityReference |
  CharacterReference |
  Element |
  Comment |
  ProcessingInst |
  IncompleteCloseTag |
  MismatchedCloseTag
}

Element {
  OpenTag nest.elementContent<"</" space? identifier space? ">", entity*> (CloseTag | missingCloseTag) |
  SelfClosingTag
}

@skip { space } {
  OpenTag[closedBy=CloseTag] {
    StartTag TagName Attribute* EndTag
  }

  SelfClosingTag {
    StartTag TagName Attribute* SelfCloseEndTag
  }

  MismatchedCloseTag {
    MismatchedStartCloseTag TagName EndTag
  }

  CloseTag[openedBy=OpenTag] {
    StartCloseTag TagName EndTag
  }

  Attribute {
    AttributeName (Is (AttributeValue | UnquotedAttributeValue))?
  }
}

AttributeValue {
  "\"" (attributeContentDouble | EntityReference | CharacterReference)* "\"" |
  "\'" (attributeContentSingle | EntityReference | CharacterReference)* "\'"
}

Comment { commentStart commentContent* commentEnd }

RawText[@export] {}

@context elementContext from "./tokens.js"

@external tokens tagStart from "./tokens.js" {
  StartTag[closedBy="EndTag SelfCloseEndTag"],
  StartCloseTag[closedBy="EndTag SelfCloseEndTag"],
  MismatchedStartCloseTag[@name=StartCloseTag],
  missingCloseTag,
  IncompleteCloseTag
}

@external tokens selfClosed from "./tokens.js" {
  SelfCloseEndTag[openedBy="StartTag"]
}

@external tokens commentContent from "./tokens.js" {
  commentContent
}

@tokens {
  EndTag[openedBy="StartTag StartCloseTag"] { "/"? ">" }

  nameStart {
    ":" | std.asciiLetter | "_" |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  nameChar {
    nameStart | "-" | "." | std.digit | $[\u00B7\u0300-\u036F\u203F-\u2040]
  }

  identifier { nameStart nameChar* }

  TagName { identifier }
  
  AttributeName { identifier }

  UnquotedAttributeValue { ![ \t\n\r\u00a0=<>"'/]+ }

  attributeContentDouble { !["&]+ }

  attributeContentSingle { !['&]+ }

  Is { "=" }

  EntityReference { "&" ![#; ]+ ";" }

  CharacterReference { "&#" ![; ]+ ";" }

  Text { ![<&]+ }

  commentStart { "<!--" }
  commentEnd { "-->" }

  ProcessingInst { "<?" piContent }

  piContent { ![?] piContent | "?" piQuestion }
  piQuestion { ![>] piContent | ">" }

  DoctypeDecl { "<!" ("doctype" | "DOCTYPE") ![>]* ">" }

  @precedence { commentStart, ProcessingInst, DoctypeDecl }

  space { (" " | "\t" | "\r" | "\n")+ }
}
