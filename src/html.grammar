@top:document.lang=html { misc (doctypeDecl misc)? (element misc)+ }

@external-grammar elementContent from "./content.js"

entity { text | entityReference | characterReference | element | comment | processingInst }

element:element.expression {
  openingTag nest.elementContent<"</" space* identifier space* ">", entity*> (closeTag | missingCloseTag) |
  selfClosingTag
}

openingTag:opening.tag {
 startTag space* tagName space* attribute* endTag
}

selfClosingTag:selfClosing.tag {
 startTag space* tagName space* attribute* (selfCloseEndTag | selfClosingEndTag)
}

closeTag:closing.tag {
  (startCloseTag space* tagName |
   mismatchedStartCloseTag space* mismatchedTagName)
  space* endTag
}

attribute {
  attributeName space* (is space* (attributeValue | unquotedAttributeValue) space*)?
}

misc {
  (comment | space | processingInst)*
}

attributeValue:attribute.string.literal { "\"" (attributeContent | entityReference | characterReference)* "\"" }

@external-tokens tagStart from "./tokens.js" {
  startTag:tag.open.punctuation,
  startCloseTag:tag.open.punctuation,
  mismatchedStartCloseTag:tag.open.punctuation,
  missingCloseTag
}

@external-tokens selfClosed from "./tokens.js" {
  selfClosingEndTag:tag.close.punctuation
}

@tokens {
  endTag:tag.close.punctuation { ">" }

  selfCloseEndTag:tag.close.punctuation { "/>" }

  nameStart {
    ":" | std.asciiLetter | "_" |
    [\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    [\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  nameChar {
    nameStart | "-" | "." | std.digit [\u00B7\u0300-\u036F\u203F-\u2040]
  }

  identifier { nameStart nameChar* }

  tagName:tag.type.name { identifier }
  
  mismatchedTagName:tag.mismatch.type.name.error { identifier }

  attributeName:attribute.property.name { identifier }

  unquotedAttributeValue:attribute.string.literal { [^ \t\n\r\u00a0=<>"'/]+ }

  attributeContent { [^"&]+ }

  is:equals.punctuation { "=" }

  entityReference:entity.literal.expression { "&" [^#; ]+ ";" }

  characterReference:character.literal.expression { "&#" [^; ]+ ";" }

  text:text.literal.expression { [^<&]+ }

  comment:block.comment { "<!--" commentContent }

  commentContent { [^\-] commentContent | "-" commentDash1 }
  commentDash1 { [^\-] commentContent | "-" commentDash2 }
  commentDash2 { [^\->] commentContent | "-" commentDash2 | ">" }

  processingInst:processing.instruction.metadata { "<?" piContent }

  piContent { [^?] piContent | "?" piQuestion }
  piQuestion { [^>] piContent | ">" }

  doctypeDecl:doctype.declaration.metadata { "<!" ("doctype" | "DOCTYPE") [^>]* ">" }

  @precedence { comment, processingInst, doctypeDecl }

  space { (" " | "\t" | "\r" | "\n")+ }
}
